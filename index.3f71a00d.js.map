{"mappings":"AAAA,MACMA,EAAW,0CAIjBC,eAAeC,EAAaC,GAC1B,MAAMC,QAAiBC,MAAMF,GAE7B,aADmBC,EAASE,M,CAK5BL,eAAaM,EAAqBC,GAClC,MAAML,EAAM,GAAGH,eAAsBQ,wDACrC,aAAaN,EAAaC,E,CCSrBF,eAAeQ,EAA8BD,GAClD,KAtBK,SAAkCE,GACvC,MAAMC,EAAkBC,SAASC,eAAe,aAC1CC,EAAqBF,SAASC,eAAe,eAC7CE,EAAqBH,SAASC,eAAe,eAC7CG,EAAkBJ,SAASC,eAAe,YAG9CF,GACAG,GACAC,GACAC,GAEAL,EAAgBM,YAAcP,EAAKQ,KACnCJ,EAAmBG,YAAc,gBAAgBP,EAAKS,KAAKC,UAC1DL,EAAkBE,YAAc,gBAAgBP,EAAKW,QAAQ,GAAGC,cACjEN,EAAgBC,YAAc,aAAaP,EAAKS,KAAKI,aAErDC,QAAQC,MAAM,4C,CAOdC,OADmBnB,EAAqBC,G,CAExC,MAAOiB,GACPD,QAAQC,MAAM,+BAAgCA,E,ECzBlDb,SAASe,iBAAiB,oBAAoB,KCA5Cf,SACGC,eAAe,eACfc,iBAAiB,UAAU,SAAUC,GACpCA,EAAMC,iBACN,MAAMrB,EAAOI,SAASC,eAAe,cAAciB,MAAMC,OACrDvB,GACFC,EAA8BD,E,IFwBpCC,EAA8B,YC5BP","sources":["src/apiServer.js","src/partials/weather-card.js","src/index.js","src/partials/search.js"],"sourcesContent":["const API_KEY = 'c28b86768a874c70b1ecd1343e8f0f24';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst GEO_BASE_URL = 'http://api.openweathermap.org/geo/1.0';\nconst MAP_BASE_URL = 'https://tile.openweathermap.org/map';\n\nasync function fetchFromAPI(url) {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\n// Obține datele meteo actuale pentru un oraș specificat\nasync function getWeatherByCityName(city) {\n  const url = `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține datele meteo actuale pentru coordonate geografice specificate\nasync function getWeatherByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\nasync function getWeatherForecastByCityName(city) {\n  const url = `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\nasync function getWeatherForecastByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 16 zile pentru un oraș specificat\nasync function get16DayForecastByCityName(city) {\n  const url = `${BASE_URL}/forecast/daily?q=${city}&cnt=16&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 16 zile pentru coordonate geografice specificate\nasync function get16DayForecastByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/forecast/daily?lat=${lat}&lon=${lon}&cnt=16&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo orară pentru un oraș specificat\nasync function getHourlyForecastByCityName(city) {\n  const url = `${BASE_URL}/forecast/hourly?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo orară pentru coordonate geografice specificate\nasync function getHourlyForecastByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/forecast/hourly?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține indicele UV pentru coordonate geografice specificate\nasync function getUVIndex(lat, lon) {\n  const url = `${BASE_URL}/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține datele despre poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollution(lat, lon) {\n  const url = `${BASE_URL}/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține coordonatele geografice pentru un oraș specificat\nasync function getGeocoding(city) {\n  const url = `${GEO_BASE_URL}/direct?q=${city}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\nasync function getReverseGeocoding(lat, lon) {\n  const url = `${GEO_BASE_URL}/reverse?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține datele meteo istorice pentru coordonate geografice specificate și o dată specificată\nasync function getHistoricalWeather(lat, lon, date) {\n  const url = `${BASE_URL}/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține alertele meteo pentru coordonate geografice specificate\nasync function getWeatherAlerts(lat, lon) {\n  const url = `${BASE_URL}/alerts?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\nasync function getWeatherMap(layer, zoom, x, y) {\n  const url = `${MAP_BASE_URL}/${layer}/${zoom}/${x}/${y}.png?appid=${API_KEY}`;\n  const response = await fetch(url);\n  return response;\n}\n\n// Obține datele meteo curente și prognoza pentru coordonate specifice\nasync function getCurrentAndForecast(lat, lon) {\n  const url = `${BASE_URL}/onecall?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollutionForecast(lat, lon) {\n  const url = `${BASE_URL}/air_pollution/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\nasync function getAirPollutionHistory(lat, lon, start, end) {\n  const url = `${BASE_URL}/air_pollution/history?lat=${lat}&lon=${lon}&start=${start}&end=${end}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține date despre stațiile meteo pentru coordonate geografice specificate\nasync function getWeatherStations(lat, lon) {\n  const url = `${BASE_URL}/stations?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza climatică pe 30 de zile pentru un oraș specificat\nasync function getClimateForecast30Days(city) {\n  const url = `${BASE_URL}/forecast/climate?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține date meteo istorice pentru un oraș specificat între datele de start și end (în format UNIX timestamp)\nasync function getHistoricalWeatherByCityName(city, start, end) {\n  const url = `${BASE_URL}/timemachine?q=${city}&start=${start}&end=${end}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\nexport {\n  getWeatherByCityName, // Obține datele meteo actuale pentru un oraș specificat\n  getWeatherByCoordinates, // Obține datele meteo actuale pentru coordonate geografice specificate\n  getWeatherForecastByCityName, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\n  getWeatherForecastByCoordinates, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\n  get16DayForecastByCityName, // Obține prognoza meteo pe 16 zile pentru un oraș specificat\n  get16DayForecastByCoordinates, // Obține prognoza meteo pe 16 zile pentru coordonate geografice specificate\n  getHourlyForecastByCityName, // Obține prognoza meteo orară pentru un oraș specificat\n  getHourlyForecastByCoordinates, // Obține prognoza meteo orară pentru coordonate geografice specificate\n  getUVIndex, // Obține indicele UV pentru coordonate geografice specificate\n  getAirPollution, // Obține datele despre poluarea aerului pentru coordonate geografice specificate\n  getGeocoding, // Obține coordonatele geografice pentru un oraș specificat\n  getReverseGeocoding, // Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\n  getHistoricalWeather, // Obține datele meteo istorice pentru coordonate geografice specificate și o dată specificată\n  getWeatherAlerts, // Obține alertele meteo pentru coordonate geografice specificate\n  getWeatherMap, // Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\n  getCurrentAndForecast, // Obține datele meteo curente și prognoza pentru coordonate specifice\n  getAirPollutionForecast, // Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\n  getAirPollutionHistory, // Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\n  getWeatherStations, // Obține date despre stațiile meteo pentru coordonate geografice specificate\n  getClimateForecast30Days, // Obține prognoza climatică pe 30 de zile pentru un oraș specificat\n  getHistoricalWeatherByCityName, // Obține date meteo istorice pentru un oraș specificat între datele de start și end (în format UNIX timestamp)\n};\n","import { getWeatherByCityName } from '../apiServer.js';\n\nexport function displayWeatherDataOnCard(data) {\n  const cityNameElement = document.getElementById('city-name');\n  const temperatureElement = document.getElementById('temperature');\n  const descriptionElement = document.getElementById('description');\n  const humidityElement = document.getElementById('humidity');\n\n  if (\n    cityNameElement &&\n    temperatureElement &&\n    descriptionElement &&\n    humidityElement\n  ) {\n    cityNameElement.textContent = data.name;\n    temperatureElement.textContent = `Temperature: ${data.main.temp} °C`;\n    descriptionElement.textContent = `Description: ${data.weather[0].description}`;\n    humidityElement.textContent = `Humidity: ${data.main.humidity}%`;\n  } else {\n    console.error('One or more elements not found in the DOM');\n  }\n}\n\nexport async function fetchAndDisplayWeatherForCity(city) {\n  try {\n    const data = await getWeatherByCityName(city);\n    displayWeatherDataOnCard(data);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n}\n\nexport function initializeWeatherCard() {\n  fetchAndDisplayWeatherForCity('București'); // Exemplu de utilizare la încărcarea paginii\n}\n","import { initializeSearch } from './partials/search.js';\nimport { initializeWeatherCard } from './partials/weather-card.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  initializeSearch(); // Inițializează bara de căutare\n  initializeWeatherCard(); // Inițializează cardul meteo și afișează datele pentru București\n});\n","import { fetchAndDisplayWeatherForCity } from './weather-card.js';\n\nexport function initializeSearch() {\n  document\n    .getElementById('search-form')\n    .addEventListener('submit', function (event) {\n      event.preventDefault();\n      const city = document.getElementById('city-input').value.trim();\n      if (city) {\n        fetchAndDisplayWeatherForCity(city);\n      }\n    });\n}\n"],"names":["$542a1f61e5e0ceed$var$BASE_URL","async","$542a1f61e5e0ceed$var$fetchFromAPI","url","response","fetch","json","$542a1f61e5e0ceed$export$4ab0f636f839e64a","city","$f4db704c75b0e7fc$export$997a04a1291a9258","data","cityNameElement","document","getElementById","temperatureElement","descriptionElement","humidityElement","textContent","name","main","temp","weather","description","humidity","console","error","$f4db704c75b0e7fc$export$9cf6ec62e739863b","addEventListener","event","preventDefault","value","trim"],"version":3,"file":"index.3f71a00d.js.map"}