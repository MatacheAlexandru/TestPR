{"mappings":"AAAA,MACMA,EAAW,0CAIjBC,eAAeC,EAAaC,GAC1B,MAAMC,QAAiBC,MAAMF,GAE7B,aADmBC,EAASE,M,CAK5BL,eAAaM,EAAqBC,GAClC,MAAML,EAAM,GAAGH,eAAsBQ,wDACrC,aAAaN,EAAaC,E,CCd5B,MAAMM,EAAU,qCAIbR,eAAYS,EAAaP,GAC1B,MAAMC,QAAiBC,MAAMF,GAC7B,IAAKC,EAASO,GACZ,MAAM,IAAIC,MAAM,wCAAwCR,EAASS,UAGnE,aADmBT,EAASE,M,CAyD7BL,eAAca,EAAgBC,EAAOC,EAAO,EAAGC,EAAU,GACxD,MAAMd,EAAM,gCAAoBM,OAAaM,+BAAmCE,UAAgBD,IAEhG,OADAE,QAAQC,IAAI,2BAA4BhB,SAC3BO,EAAaP,E,CClErB,SAASiB,EAAyBC,GACvC,MAAMC,EAAkBC,SAASC,eAAe,aAC1CC,EAAqBF,SAASC,eAAe,eAC7CE,EAAqBH,SAASC,eAAe,eAC7CG,EAAkBJ,SAASC,eAAe,YAC1CI,EAAqBL,SAASC,eAAe,gBAGjDF,GACAG,GACAC,GACAC,GACAC,GAEAN,EAAgBO,YAAcR,EAAKS,KACnCL,EAAmBI,YAAc,gBAAgBR,EAAKU,KAAKC,UAC1DN,EAAkBG,YAAc,gBAAgBR,EAAKY,QAAQ,GAAGC,cACjEP,EAAgBE,YAAc,aAAaR,EAAKU,KAAKI,YAGrDrB,EAAgBO,EAAKS,KAAM,EAAG,GAC3BM,MAAKC,IACJnB,QAAQC,IAAI,cAAekB,GACvBA,GAAaA,EAAUC,MAAQD,EAAUC,KAAKC,OAAS,IACzDX,EAAmBY,MAAMC,gBAAkB,OAAOJ,EAAUC,KAAK,GAAGI,gBACpEd,EAAmBY,MAAMG,eAAiB,Q,IAG7CC,OAAMC,IACL3B,QAAQ2B,MAAM,yCAA0CA,EAAM,KAGlE3B,QAAQ2B,MAAM,4C,CAIX5C,eAAe6C,EAA8BtC,GAClD,IAEEY,QADmBb,EAAqBC,G,CAExC,MAAOqC,GACP3B,QAAQ2B,MAAM,+BAAgCA,E,ECzClDtB,SAASwB,iBAAiB,oBAAoB9C,UCA5CsB,SACGC,eAAe,eACfuB,iBAAiB,UAAU,SAAUC,GACpCA,EAAMC,iBACN,MAAMzC,EAAOe,SAASC,eAAe,cAAc0B,MAAMC,OACrD3C,GACFsC,EAA8BtC,E,IFwCpCsC,EAA8B,YC5CP","sources":["src/apiOpenWeather.js","src/apiPixabay.js","src/partials/weather-cardExample.js","src/index.js","src/partials/searchExemple.js"],"sourcesContent":["const API_KEY = 'c28b86768a874c70b1ecd1343e8f0f24';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst GEO_BASE_URL = 'http://api.openweathermap.org/geo/1.0';\nconst MAP_BASE_URL = 'https://tile.openweathermap.org/map';\n\nasync function fetchFromAPI(url) {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\n// Obține datele meteo actuale pentru un oraș specificat\nasync function getWeatherByCityName(city) {\n  const url = `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține datele meteo actuale pentru coordonate geografice specificate\nasync function getWeatherByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\nasync function getWeatherForecastByCityName(city) {\n  const url = `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\nasync function getWeatherForecastByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 16 zile pentru un oraș specificat\nasync function get16DayForecastByCityName(city) {\n  const url = `${BASE_URL}/forecast/daily?q=${city}&cnt=16&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo pe 16 zile pentru coordonate geografice specificate\nasync function get16DayForecastByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/forecast/daily?lat=${lat}&lon=${lon}&cnt=16&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo orară pentru un oraș specificat\nasync function getHourlyForecastByCityName(city) {\n  const url = `${BASE_URL}/forecast/hourly?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza meteo orară pentru coordonate geografice specificate\nasync function getHourlyForecastByCoordinates(lat, lon) {\n  const url = `${BASE_URL}/forecast/hourly?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține indicele UV pentru coordonate geografice specificate\nasync function getUVIndex(lat, lon) {\n  const url = `${BASE_URL}/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține datele despre poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollution(lat, lon) {\n  const url = `${BASE_URL}/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține coordonatele geografice pentru un oraș specificat\nasync function getGeocoding(city) {\n  const url = `${GEO_BASE_URL}/direct?q=${city}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\nasync function getReverseGeocoding(lat, lon) {\n  const url = `${GEO_BASE_URL}/reverse?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține datele meteo istorice pentru coordonate geografice specificate și o dată specificată\nasync function getHistoricalWeather(lat, lon, date) {\n  const url = `${BASE_URL}/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține alertele meteo pentru coordonate geografice specificate\nasync function getWeatherAlerts(lat, lon) {\n  const url = `${BASE_URL}/alerts?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\nasync function getWeatherMap(layer, zoom, x, y) {\n  const url = `${MAP_BASE_URL}/${layer}/${zoom}/${x}/${y}.png?appid=${API_KEY}`;\n  const response = await fetch(url);\n  return response;\n}\n\n// Obține datele meteo curente și prognoza pentru coordonate specifice\nasync function getCurrentAndForecast(lat, lon) {\n  const url = `${BASE_URL}/onecall?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollutionForecast(lat, lon) {\n  const url = `${BASE_URL}/air_pollution/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\nasync function getAirPollutionHistory(lat, lon, start, end) {\n  const url = `${BASE_URL}/air_pollution/history?lat=${lat}&lon=${lon}&start=${start}&end=${end}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține date despre stațiile meteo pentru coordonate geografice specificate\nasync function getWeatherStations(lat, lon) {\n  const url = `${BASE_URL}/stations?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n  return await fetchFromAPI(url);\n}\n\n// Obține prognoza climatică pe 30 de zile pentru un oraș specificat\nasync function getClimateForecast30Days(city) {\n  const url = `${BASE_URL}/forecast/climate?q=${city}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n// Obține date meteo istorice pentru un oraș specificat între datele de start și end (în format UNIX timestamp)\nasync function getHistoricalWeatherByCityName(city, start, end) {\n  const url = `${BASE_URL}/timemachine?q=${city}&start=${start}&end=${end}&appid=${API_KEY}&units=metric`;\n  return await fetchFromAPI(url);\n}\n\n\nexport {\n  getWeatherByCityName, // Obține datele meteo actuale pentru un oraș specificat\n  getWeatherByCoordinates, // Obține datele meteo actuale pentru coordonate geografice specificate\n  getWeatherForecastByCityName, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\n  getWeatherForecastByCoordinates, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\n  get16DayForecastByCityName, // Obține prognoza meteo pe 16 zile pentru un oraș specificat\n  get16DayForecastByCoordinates, // Obține prognoza meteo pe 16 zile pentru coordonate geografice specificate\n  getHourlyForecastByCityName, // Obține prognoza meteo orară pentru un oraș specificat\n  getHourlyForecastByCoordinates, // Obține prognoza meteo orară pentru coordonate geografice specificate\n  getUVIndex, // Obține indicele UV pentru coordonate geografice specificate\n  getAirPollution, // Obține datele despre poluarea aerului pentru coordonate geografice specificate\n  getGeocoding, // Obține coordonatele geografice pentru un oraș specificat\n  getReverseGeocoding, // Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\n  getHistoricalWeather, // Obține datele meteo istorice pentru coordonate geografice specificate și o dată specificată\n  getWeatherAlerts, // Obține alertele meteo pentru coordonate geografice specificate\n  getWeatherMap, // Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\n  getCurrentAndForecast, // Obține datele meteo curente și prognoza pentru coordonate specifice\n  getAirPollutionForecast, // Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\n  getAirPollutionHistory, // Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\n  getWeatherStations, // Obține date despre stațiile meteo pentru coordonate geografice specificate\n  getClimateForecast30Days, // Obține prognoza climatică pe 30 de zile pentru un oraș specificat\n  getHistoricalWeatherByCityName, // Obține date meteo istorice pentru un oraș specificat între datele de start și end (în format UNIX timestamp)\n};\n","const API_KEY = '24587351-f51ecbfdd1a1ed72c58205b43';\nconst BASE_URL = 'https://pixabay.com/api';\n\n// Funcție generală pentru cereri către Pixabay API\nasync function fetchFromAPI(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Network response was not ok. Status: ${response.status}`);\n  }\n  const data = await response.json();\n  return data;\n}\n\n// Obține imagini după un cuvânt cheie\nasync function searchImages(query, page = 1, perPage = 20) {\n  const url = `${BASE_URL}/?key=${API_KEY}&q=${query}&image_type=photo&page=${page}&per_page=${perPage}`;\n  console.log('Fetching images from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține videouri după un cuvânt cheie\nasync function searchVideos(query, page = 1, perPage = 20) {\n  const url = `${BASE_URL}/videos/?key=${API_KEY}&q=${query}&page=${page}&per_page=${perPage}`;\n  console.log('Fetching videos from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține detalii despre o imagine după ID\nasync function getImageDetails(imageId) {\n  const url = `${BASE_URL}/?key=${API_KEY}&id=${imageId}`;\n  console.log('Fetching image details from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține detalii despre un video după ID\nasync function getVideoDetails(videoId) {\n  const url = `${BASE_URL}/videos/?key=${API_KEY}&id=${videoId}`;\n  console.log('Fetching video details from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține imagini populare\nasync function getPopularImages(\n  category = '',\n  editorsChoice = false,\n  page = 1,\n  perPage = 20\n) {\n  const url = `${BASE_URL}/?key=${API_KEY}&order=popular&category=${category}&editors_choice=${editorsChoice}&page=${page}&per_page=${perPage}`;\n  console.log('Fetching popular images from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține videouri populare\nasync function getPopularVideos(\n  category = '',\n  editorsChoice = false,\n  page = 1,\n  perPage = 20\n) {\n  const url = `${BASE_URL}/videos/?key=${API_KEY}&order=popular&category=${category}&editors_choice=${editorsChoice}&page=${page}&per_page=${perPage}`;\n  console.log('Fetching popular videos from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține imagini aleatorii\nasync function getRandomImages(query, page = 1, perPage = 3) {\n  const url = `${BASE_URL}/?key=${API_KEY}&q=${query}&image_type=photo&per_page=${perPage}&page=${page}`;\n  console.log('Fetching image from URL:', url); // Log pentru verificarea URL-ului\n  return await fetchFromAPI(url);\n}\n\n// Obține videouri aleatorii\nasync function getRandomVideos(category = '', page = 1, perPage = 20) {\n  const url = `${BASE_URL}/videos/?key=${API_KEY}&order=latest&category=${category}&page=${page}&per_page=${perPage}`;\n  console.log('Fetching random videos from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține imagini după culoare\nasync function getImagesByColor(color, page = 1, perPage = 20) {\n  const url = `${BASE_URL}/?key=${API_KEY}&colors=${color}&image_type=photo&page=${page}&per_page=${perPage}`;\n  console.log('Fetching images by color from URL:', url);\n  return await fetchFromAPI(url);\n}\n\n// Obține videouri după culoare (dacă este suportat)\nasync function getVideosByColor(color, page = 1, perPage = 20) {\n  const url = `${BASE_URL}/videos/?key=${API_KEY}&colors=${color}&page=${page}&per_page=${perPage}`;\n  console.log('Fetching videos by color from URL:', url);\n  return await fetchFromAPI(url);\n}\n\nexport {\n  searchImages, // Obține imagini după un cuvânt cheie\n  searchVideos, // Obține videouri după un cuvânt cheie\n  getImageDetails, // Obține detalii despre o imagine după ID\n  getVideoDetails, // Obține detalii despre un video după ID\n  getPopularImages, // Obține imagini populare\n  getPopularVideos, // Obține videouri populare\n  getRandomImages, // Obține imagini aleatorii\n  getRandomVideos, // Obține videouri aleatorii\n  getImagesByColor, // Obține imagini după culoare\n  getVideosByColor, // Obține videouri după culoare (dacă este suportat)\n};\n","import { getWeatherByCityName } from '../apiOpenWeather.js';\nimport { getRandomImages } from '../apiPixabay.js';\n\nexport function displayWeatherDataOnCard(data) {\n  const cityNameElement = document.getElementById('city-name');\n  const temperatureElement = document.getElementById('temperature');\n  const descriptionElement = document.getElementById('description');\n  const humidityElement = document.getElementById('humidity');\n  const weatherCardElement = document.getElementById('weather-card');\n\n  if (\n    cityNameElement &&\n    temperatureElement &&\n    descriptionElement &&\n    humidityElement &&\n    weatherCardElement\n  ) {\n    cityNameElement.textContent = data.name;\n    temperatureElement.textContent = `Temperature: ${data.main.temp} °C`;\n    descriptionElement.textContent = `Description: ${data.weather[0].description}`;\n    humidityElement.textContent = `Humidity: ${data.main.humidity}%`;\n\n    // Obține și afișează imaginea orașului\n    getRandomImages(data.name, 1, 3) // Cerem trei imagini pentru a evita erorile de validare\n      .then(imageData => {\n        console.log('Image data:', imageData); // Log pentru verificarea datelor imaginii\n        if (imageData && imageData.hits && imageData.hits.length > 0) {\n          weatherCardElement.style.backgroundImage = `url(${imageData.hits[0].webformatURL})`;\n          weatherCardElement.style.backgroundSize = 'cover';\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching image from Pixabay API:', error);\n      });\n  } else {\n    console.error('One or more elements not found in the DOM');\n  }\n}\n\nexport async function fetchAndDisplayWeatherForCity(city) {\n  try {\n    const data = await getWeatherByCityName(city);\n    displayWeatherDataOnCard(data);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n}\n\nexport function initializeWeatherCard() {\n  fetchAndDisplayWeatherForCity('București'); // Exemplu de utilizare la încărcarea paginii\n}\n","import { initializeSearch } from './partials/searchExemple.js';\nimport { initializeWeatherCard } from './partials/weather-cardExample.js';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  initializeSearch(); // Inițializează bara de căutare\n  initializeWeatherCard(); // Inițializează cardul meteo și afișează datele pentru București\n});\n","import { fetchAndDisplayWeatherForCity } from './weather-cardExample.js';\n\nexport function initializeSearch() {\n  document\n    .getElementById('search-form')\n    .addEventListener('submit', function (event) {\n      event.preventDefault();\n      const city = document.getElementById('city-input').value.trim();\n      if (city) {\n        fetchAndDisplayWeatherForCity(city);\n      }\n    });\n}\n"],"names":["$89f78dce0ada5702$var$BASE_URL","async","$89f78dce0ada5702$var$fetchFromAPI","url","response","fetch","json","$89f78dce0ada5702$export$4ab0f636f839e64a","city","$45d73b5e94b45b0d$var$API_KEY","$45d73b5e94b45b0d$var$fetchFromAPI","ok","Error","status","$45d73b5e94b45b0d$export$c5318665bb77bd8e","query","page","perPage","console","log","$7cdd57f9eb4a32af$export$9cf6ec62e739863b","data","cityNameElement","document","getElementById","temperatureElement","descriptionElement","humidityElement","weatherCardElement","textContent","name","main","temp","weather","description","humidity","then","imageData","hits","length","style","backgroundImage","webformatURL","backgroundSize","catch","error","$7cdd57f9eb4a32af$export$997a04a1291a9258","addEventListener","event","preventDefault","value","trim"],"version":3,"file":"index.f910bb72.js.map"}